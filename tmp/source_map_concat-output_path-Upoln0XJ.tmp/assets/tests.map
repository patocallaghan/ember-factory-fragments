{"version":3,"sources":["ember-factory-fragments/tests/acceptance/example-test.js","ember-factory-fragments/tests/acceptance/example-test.jshint.js","ember-factory-fragments/tests/adapters/application.jshint.js","ember-factory-fragments/tests/app.jshint.js","ember-factory-fragments/tests/controllers/application.jshint.js","ember-factory-fragments/tests/factories/city.js","ember-factory-fragments/tests/factories/city.jshint.js","ember-factory-fragments/tests/factories/country.js","ember-factory-fragments/tests/factories/country.jshint.js","ember-factory-fragments/tests/factories/region.js","ember-factory-fragments/tests/factories/region.jshint.js","ember-factory-fragments/tests/factories/state.js","ember-factory-fragments/tests/factories/state.jshint.js","ember-factory-fragments/tests/factories/weather.js","ember-factory-fragments/tests/factories/weather.jshint.js","ember-factory-fragments/tests/helpers/destroy-app.js","ember-factory-fragments/tests/helpers/destroy-app.jshint.js","ember-factory-fragments/tests/helpers/module-for-acceptance.js","ember-factory-fragments/tests/helpers/module-for-acceptance.jshint.js","ember-factory-fragments/tests/helpers/resolver.js","ember-factory-fragments/tests/helpers/resolver.jshint.js","ember-factory-fragments/tests/helpers/start-app.js","ember-factory-fragments/tests/helpers/start-app.jshint.js","ember-factory-fragments/tests/integration/example-test.js","ember-factory-fragments/tests/integration/example-test.jshint.js","ember-factory-fragments/tests/models/city.jshint.js","ember-factory-fragments/tests/models/country.jshint.js","ember-factory-fragments/tests/models/region.jshint.js","ember-factory-fragments/tests/models/state.jshint.js","ember-factory-fragments/tests/models/weather.jshint.js","ember-factory-fragments/tests/resolver.jshint.js","ember-factory-fragments/tests/router.jshint.js","ember-factory-fragments/tests/routes/application.jshint.js","ember-factory-fragments/tests/routes/example.jshint.js","ember-factory-fragments/tests/serializers/application.jshint.js","ember-factory-fragments/tests/serializers/country.jshint.js","ember-factory-fragments/tests/serializers/region.jshint.js","ember-factory-fragments/tests/test-helper.js","ember-factory-fragments/tests/test-helper.jshint.js","ember-factory-fragments/tests/unit/factory-test.js","ember-factory-fragments/tests/unit/factory-test.jshint.js","ember-factory-fragments/tests/unit/models/region-test.js","ember-factory-fragments/tests/unit/models/region-test.jshint.js","ember-factory-fragments/tests/unit/models/state-test.js","ember-factory-fragments/tests/unit/models/state-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('ember-factory-fragments/tests/acceptance/example-test', ['exports', 'qunit', 'ember-data-factory-guy', 'ember-factory-fragments/tests/helpers/module-for-acceptance'], function (exports, _qunit, _emberDataFactoryGuy, _emberFactoryFragmentsTestsHelpersModuleForAcceptance) {\n\n  (0, _emberFactoryFragmentsTestsHelpersModuleForAcceptance['default'])('Acceptance | example', {\n    beforeEach: function beforeEach() {\n      (0, _emberDataFactoryGuy.mockSetup)();\n    },\n    afterEach: function afterEach() {\n      (0, _emberDataFactoryGuy.mockTeardown)();\n    }\n  });\n\n  (0, _qunit.test)('visiting /', function (assert) {\n    var mock = (0, _emberDataFactoryGuy.buildList)('country', 2);\n    mock.unwrap();\n    console.log(mock.countries);\n    $.mockjax({\n      url: \"/countries\",\n      responseText: JSON.stringify(mock.countries)\n    });\n    // mockFindAll('country').returns({ json: mock });\n    visit('/');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/');\n    });\n  });\n});","define('ember-factory-fragments/tests/acceptance/example-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/example-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'acceptance/example-test.js should pass jshint.\\nacceptance/example-test.js: line 2, col 21, \\'mockFindAll\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('ember-factory-fragments/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 0, col 0, Bad option: \\'ender\\'.\\nadapters/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('ember-factory-fragments/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 0, col 0, Bad option: \\'ender\\'.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n8 errors');\n  });\n});","define('ember-factory-fragments/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 0, col 0, Bad option: \\'ender\\'.\\ncontrollers/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('ember-factory-fragments/tests/factories/city', ['exports', 'ember-data-factory-guy'], function (exports, _emberDataFactoryGuy) {\n\n  _emberDataFactoryGuy['default'].define('city', {\n    'default': {\n      name: 'New York'\n    },\n    maine: {\n      name: 'Maine'\n    }\n  });\n});","define('ember-factory-fragments/tests/factories/city.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - factories/city.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'factories/city.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/factories/country', ['exports', 'ember-data-factory-guy'], function (exports, _emberDataFactoryGuy) {\n\n  _emberDataFactoryGuy['default'].define('country', {\n    'default': {\n      name: 'America',\n      cities: _emberDataFactoryGuy['default'].hasMany('city', 3),\n      weather: _emberDataFactoryGuy['default'].belongsTo('weather'),\n      regions: _emberDataFactoryGuy['default'].hasMany('region', 1)\n    },\n    european: {\n      name: 'Ireland'\n    }\n  });\n});","define('ember-factory-fragments/tests/factories/country.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - factories/country.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'factories/country.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/factories/region', ['exports', 'ember-data-factory-guy'], function (exports, _emberDataFactoryGuy) {\n\n  _emberDataFactoryGuy['default'].define('region', {\n    'default': {\n      name: 'east',\n      capital: _emberDataFactoryGuy['default'].belongsTo('city')\n    }\n  });\n});","define('ember-factory-fragments/tests/factories/region.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - factories/region.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'factories/region.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/factories/state', ['exports', 'ember-data-factory-guy'], function (exports, _emberDataFactoryGuy) {\n\n  _emberDataFactoryGuy['default'].define('state', {\n    'default': {\n      id: 'state.new_jersey',\n      name: 'New Jersey'\n    },\n    nebraska: {\n      id: 'state.nebraska',\n      name: 'Nebraska'\n    },\n    delaware: {\n      id: 'state.delaware',\n      name: 'Delaware'\n    }\n  });\n});","define('ember-factory-fragments/tests/factories/state.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - factories/state.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'factories/state.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/factories/weather', ['exports', 'ember-data-factory-guy'], function (exports, _emberDataFactoryGuy) {\n\n  _emberDataFactoryGuy['default'].define('weather', {\n    'default': {\n      temperature: 20,\n      description: 'Sunny'\n    }\n  });\n});","define('ember-factory-fragments/tests/factories/weather.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - factories/weather.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'factories/weather.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('ember-factory-fragments/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember-factory-fragments/tests/helpers/start-app', 'ember-factory-fragments/tests/helpers/destroy-app'], function (exports, _qunit, _emberFactoryFragmentsTestsHelpersStartApp, _emberFactoryFragmentsTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _emberFactoryFragmentsTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _emberFactoryFragmentsTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('ember-factory-fragments/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/helpers/resolver', ['exports', 'ember-factory-fragments/resolver', 'ember-factory-fragments/config/environment'], function (exports, _emberFactoryFragmentsResolver, _emberFactoryFragmentsConfigEnvironment) {\n\n  var resolver = _emberFactoryFragmentsResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _emberFactoryFragmentsConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _emberFactoryFragmentsConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ember-factory-fragments/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/helpers/start-app', ['exports', 'ember', 'ember-factory-fragments/app', 'ember-factory-fragments/config/environment'], function (exports, _ember, _emberFactoryFragmentsApp, _emberFactoryFragmentsConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _emberFactoryFragmentsConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _emberFactoryFragmentsApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('ember-factory-fragments/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define(\"ember-factory-fragments/tests/integration/example-test\", [\"exports\"], function (exports) {});","define('ember-factory-fragments/tests/integration/example-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/example-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/example-test.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/models/city.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/city.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/city.js should pass jshint.\\nmodels/city.js: line 0, col 0, Bad option: \\'ender\\'.\\nmodels/city.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/city.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('ember-factory-fragments/tests/models/country.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/country.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/country.js should pass jshint.\\nmodels/country.js: line 0, col 0, Bad option: \\'ender\\'.\\nmodels/country.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/country.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/country.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('ember-factory-fragments/tests/models/region.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/region.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/region.js should pass jshint.\\nmodels/region.js: line 0, col 0, Bad option: \\'ender\\'.\\nmodels/region.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/region.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('ember-factory-fragments/tests/models/state.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/state.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/state.js should pass jshint.\\nmodels/state.js: line 0, col 0, Bad option: \\'ender\\'.\\nmodels/state.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/state.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('ember-factory-fragments/tests/models/weather.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/weather.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/weather.js should pass jshint.\\nmodels/weather.js: line 0, col 0, Bad option: \\'ender\\'.\\nmodels/weather.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/weather.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/weather.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('ember-factory-fragments/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass jshint.\\nresolver.js: line 0, col 0, Bad option: \\'ender\\'.\\nresolver.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nresolver.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('ember-factory-fragments/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 0, col 0, Bad option: \\'ender\\'.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nrouter.js: line 9, col 3, Missing \"use strict\" statement.\\nrouter.js: line 12, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n6 errors');\n  });\n});","define('ember-factory-fragments/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass jshint.\\nroutes/application.js: line 0, col 0, Bad option: \\'ender\\'.\\nroutes/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 4, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/application.js: line 5, col 5, Missing \"use strict\" statement.\\nroutes/application.js: line 5, col 44, Missing semicolon.\\n\\n6 errors');\n  });\n});","define('ember-factory-fragments/tests/routes/example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/example.js should pass jshint.\\nroutes/example.js: line 0, col 0, Bad option: \\'ender\\'.\\nroutes/example.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/example.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/example.js: line 4, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/example.js: line 5, col 5, Missing \"use strict\" statement.\\n\\n5 errors');\n  });\n});","define('ember-factory-fragments/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/application.js should pass jshint.\\nserializers/application.js: line 0, col 0, Bad option: \\'ender\\'.\\nserializers/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/application.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/application.js: line 4, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/application.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/application.js: line 7, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/application.js: line 7, col 31, \\'default parameters\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/application.js: line 8, col 5, Missing \"use strict\" statement.\\nserializers/application.js: line 11, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/application.js: line 12, col 5, Missing \"use strict\" statement.\\nserializers/application.js: line 14, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/application.js: line 15, col 5, Missing \"use strict\" statement.\\n\\n12 errors');\n  });\n});","define('ember-factory-fragments/tests/serializers/country.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/country.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/country.js should pass jshint.\\nserializers/country.js: line 0, col 0, Bad option: \\'ender\\'.\\nserializers/country.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/country.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/country.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('ember-factory-fragments/tests/serializers/region.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/region.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/region.js should pass jshint.\\nserializers/region.js: line 0, col 0, Bad option: \\'ender\\'.\\nserializers/region.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/region.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/region.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('ember-factory-fragments/tests/test-helper', ['exports', 'ember-factory-fragments/tests/helpers/resolver', 'ember-qunit'], function (exports, _emberFactoryFragmentsTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_emberFactoryFragmentsTestsHelpersResolver['default']);\n});","define('ember-factory-fragments/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/unit/factory-test', ['exports', 'ember-qunit', 'ember-data-factory-guy'], function (exports, _emberQunit, _emberDataFactoryGuy) {\n\n  (0, _emberQunit.moduleForModel)('country', 'Unit | Model | country', {\n    needs: ['model:city', 'model:weather'],\n    beforeEach: function beforeEach() {\n      (0, _emberDataFactoryGuy.manualSetup)(this.container);\n    }\n  });\n\n  (0, _emberQunit.test)('Creates a country', function () {\n    var country = (0, _emberDataFactoryGuy.make)('country');\n    ok(country);\n  });\n});","define('ember-factory-fragments/tests/unit/factory-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/factory-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/factory-test.js should pass jshint.\\nunit/factory-test.js: line 13, col 3, \\'ok\\' is not defined.\\n\\n1 error');\n  });\n});","define('ember-factory-fragments/tests/unit/models/region-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('region', 'Unit | Model | region', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-factory-fragments/tests/unit/models/region-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/region-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/region-test.js should pass jshint.');\n  });\n});","define('ember-factory-fragments/tests/unit/models/state-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('state', 'Unit | Model | state', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-factory-fragments/tests/unit/models/state-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/state-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/state-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('ember-factory-fragments/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}